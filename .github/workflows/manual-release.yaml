name: manual-release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'major or minor?'
        required: true
        default: 'minor'

jobs:
  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.type.outputs.branch }}
      version: ${{ steps.vars.outputs.version }}
      python_version: ${{ steps.python.outputs.python_version }}
      pr_url: ${{ steps.pr.outputs.pr_url }}

    if: github.ref == 'refs/heads/main' #|| github.ref == 'refs/heads/hotfix' # TODO (7)

    steps:
      - name: Set release type
        id: type
        run: |
          if [ "$REF" == "refs/heads/main" ]
          then
              echo "::set-output name=branch::release"
          else
              echo "::set-output name=branch::hotfix"
          fi
        env:
          REF: ${{ github.ref }}

      - name: Delete current release branch
        uses: dawidd6/action-delete-branch@v3
        if: steps.type.outputs.branch == 'release'
        continue-on-error: true
        with:
          github_token: ${{github.token}}
          branches: release

      - name: Create new release branch
        uses: peterjgrainger/action-create-branch@v2.0.1
        if: steps.type.outputs.branch == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: 'release'

      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.type.outputs.branch }}
          fetch-depth: 0

      - name: Python version
        id: python
        shell: bash
        run: |
          make python-version
          echo ::set-output name=python_version::$(make python-version)

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python.outputs.python_version }}

      - name: Install pipenv
        run: make install

      - name: Cache
        id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make init

      - name: Bump Release
        if: steps.type.outputs.branch == 'release'
        shell: bash
        env:
          BUMP_TYPE: ${{ github.event.inputs.bump_type }}
        run: make bump-release-and-push

      # TODO (7)
      #      - name: Bump Hotfix
      #        if: steps.type.outputs.branch == 'hotfix'
      #        shell: bash
      #        run: make bump-patch-and-push

      - name: Set variables
        id: vars
        run: echo ::set-output name=version::$(make version)

      - name: Find old PR
        uses: juliangruber/find-pull-request-action@v1
        id: find-pull-request
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.type.outputs.branch }}

      - name: Close old PR
        if: ${{ steps.find-pull-request.outputs.number > 0 }}
        uses: peter-evans/close-pull@v1
        with:
          pull-request-number: ${{ steps.find-pull-request.outputs.number }}
          comment: Auto-closing pull request
          delete-branch: false

      - name: Create new PR
        id: pr
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ steps.type.outputs.branch }}
          destination_branch: main
          pr_title: "Release ${{ steps.vars.outputs.version }} to PROD"
          pr_body: ":gear: *Automated PR*\nWhen merged ${{ github.event.repository.name }} ${{ steps.vars.outputs.version }} ${{ steps.type.outputs.branch }} will be released to PROD\nClose PR to cancel"
          pr_reviewer: "${{ github.actor }}"
          pr_assignee: "${{ github.actor }}"
          pr_label: "auto-pr,release"
          pr_allow_empty: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Output
        shell: bash
        run: |
          echo "version: ${{ steps.vars.outputs.version }}"
          echo "python_version: ${{ steps.python.outputs.python_version }}"
          echo "pr_url: ${{ steps.pr.outputs.pr_url }}"


  build-deploy:
    name: Build & Deploy Release
    runs-on: ubuntu-latest
    needs: prepare-release

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare-release.outputs.branch }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.prepare-release.outputs.python_version }}

      - name: Install pipenv
        run: make install

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make init

      - name: Package code
        run: make package

      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: egg-${{ steps.vars.outputs.version }}
          path: dist/

      - name: Deploy package to test
        run: echo "DEPLOY v${{ steps.vars.outputs.version }} TO TEST"


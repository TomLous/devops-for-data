name: prod-deploy

on:
  pull_request:
    types: [ closed ]

jobs:
  prepare-release:
    name: Release to Prod
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      python_version: ${{ steps.python.outputs.python_version }}

#     If merged & pr was tagged release & from a release branch
    if: contains(github.event.pull_request.labels.*.name, 'release') && github.event.pull_request.merged == true && (github.event.pull_request.head.ref == 'release' || github.event.pull_request.head.ref == 'hotfix')

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Python version
        id: python
        shell: bash
        run: echo ::set-output name=python_version::$(make python-version)

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ steps.python.outputs.python_version }}

      - name: Install pipenv
        run: make install

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make init

      - name: Set variables
        id: vars
        run: echo ::set-output name=version::$(make version)

  build-deploy:
    name: Build & Deploy to PROD
    runs-on: ubuntu-latest
    needs: prepare-release

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare-release.outputs.branch }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.prepare-release.outputs.python_version }}

      - name: Install pipenv
        run: make install

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make init

      - name: Package code
        run: make package

      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: egg-${{ steps.vars.outputs.version }}
          path: dist/

      - name: Deploy package to prod
        run: echo "DEPLOY v${{ steps.vars.outputs.version }} TO PROD"


  success:
    needs: [ prepare-release, build-deploy ]
    name: Notify success
    runs-on: ubuntu-latest

    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{  needs.prepare-release.outputs.version }}
          release_name: Release ${{  needs.prepare-release.outputs.version }}
          draft: false
          prerelease: false

      - name: Delete current release/hotfix branch
        uses: dawidd6/action-delete-branch@v3
        continue-on-error: true
        with:
          github_token: ${{github.token}}
          branches: ${{ github.event.pull_request.head.ref}}

  abandon-release:
    name: Abandon Release to Prod
    runs-on: ubuntu-latest

#     If PR was closed, but not merged
    if: contains(github.event.pull_request.labels.*.name, 'release') && github.event.pull_request.merged == false && github.event.pull_request.head.ref == 'release'

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Delete tag
        shell: bash
        run: |
          # TODO fix tag deletion => sometimes the tag is on another commit in the branch
          TAG=$(git describe --exact-match ${{ github.event.pull_request.head.sha }})
          echo $TAG
          git tag -d $TAG
          git push --tags origin :refs/tags/$TAG



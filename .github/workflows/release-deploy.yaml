name: release-deploy

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'test or prod?'
        required: true
        default: 'test'
      bump_type:
        description: 'major or minor?'
        required: true
        default: 'minor'

jobs:
  release-deploy:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    steps:
      - name: Delete branch
        uses: dawidd6/action-delete-branch@v3
        continue-on-error: true
        with:
          github_token: ${{github.token}}
          branches: release

      - name: Create Release Branch
        uses: peterjgrainger/action-create-branch@v2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: 'release'

      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          ref: 'release'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8.2"

      - name: Install pipenv
        run: make install

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: make init

      - name: Github config
        run: |
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Bump minor version
        if: github.event.inputs.bump_type == 'minor'
        run: #TODO bump minor

      - name: Bump major version
        if: github.event.inputs.bump_type == 'major'
        run: #TODO bump major

      - name: Set variables
        id: vars
        run: echo ::set-output name=version::$(make version)

      - name: Run analyzer
        run: make analyze

      - name: Run test suite
        run: make tests

      - name: Upload test results (junit)
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: pytest-results
          path: junit/test-results.xml

      - name: Upload test results (html)
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: pytest-html
          path: htmlcov/

      - name: Package code
        run: make package

      - name: Push version & tag
        run: exit 1; # TODO

      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: egg-${{ steps.vars.outputs.version }}
          path: dist/

      - name: Deploy package to dev
        run: echo "DEPLOY v${{ steps.vars.outputs.version }} TO DEV"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.vars.outputs.version }}
          release_name: Release ${{ steps.vars.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.gzip
          asset_name: release-${{ steps.vars.outputs.version }}.gzip
          asset_content_type: application/gzip

      - name: Deploy package to test
        run: echo "DEPLOY ${{ steps.vars.outputs.version }} TO TEST"

      - name: Deploy package to prod
        if: github.event.inputs.release_type == 'prod'
        run: echo "DEPLOY ${{ steps.vars.outputs.version }} TO PROD"

      - name: Merge release -> main
        run: |
          git fetch
          git checkout main
          git --no-pager branch
          git merge release
          git push --tags origin main
          git branch -d release
          git push origin :release


